// <auto-generated>
using System.Reflection;

namespace FxResources.System.Security.Cryptography.Xml.Patched
{
    internal static class SR { }
}
namespace System
{
    internal static partial class SR
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(FxResources.System.Security.Cryptography.Xml.Patched.SR)));

        /// <summary>Index was out of range. Must be non-negative and less than the size of the collection.</summary>
        internal static string ArgumentOutOfRange_Index => GetResourceString("ArgumentOutOfRange_Index", @"Index was out of range. Must be non-negative and less than the size of the collection.");
        /// <summary>String cannot be empty or null.</summary>
        internal static string Arg_EmptyOrNullString => GetResourceString("Arg_EmptyOrNullString", @"String cannot be empty or null.");
        /// <summary>A certificate chain could not be built to a trusted root authority.</summary>
        internal static string Cryptography_Partial_Chain => GetResourceString("Cryptography_Partial_Chain", @"A certificate chain could not be built to a trusted root authority.");
        /// <summary>Bad wrapped key size.</summary>
        internal static string Cryptography_Xml_BadWrappedKeySize => GetResourceString("Cryptography_Xml_BadWrappedKeySize", @"Bad wrapped key size.");
        /// <summary>A Cipher Data element should have either a CipherValue or a CipherReference element.</summary>
        internal static string Cryptography_Xml_CipherValueElementRequired => GetResourceString("Cryptography_Xml_CipherValueElementRequired", @"A Cipher Data element should have either a CipherValue or a CipherReference element.");
        /// <summary>Could not create hash algorithm object.</summary>
        internal static string Cryptography_Xml_CreateHashAlgorithmFailed => GetResourceString("Cryptography_Xml_CreateHashAlgorithmFailed", @"Could not create hash algorithm object.");
        /// <summary>Could not create the XML transformation identified by the URI {0}.</summary>
        internal static string Cryptography_Xml_CreateTransformFailed => GetResourceString("Cryptography_Xml_CreateTransformFailed", @"Could not create the XML transformation identified by the URI {0}.");
        /// <summary>Failed to create signing key.</summary>
        internal static string Cryptography_Xml_CreatedKeyFailed => GetResourceString("Cryptography_Xml_CreatedKeyFailed", @"Failed to create signing key.");
        /// <summary>A DigestMethod must be specified on a Reference prior to generating XML.</summary>
        internal static string Cryptography_Xml_DigestMethodRequired => GetResourceString("Cryptography_Xml_DigestMethodRequired", @"A DigestMethod must be specified on a Reference prior to generating XML.");
        /// <summary>A Reference must contain a DigestValue.</summary>
        internal static string Cryptography_Xml_DigestValueRequired => GetResourceString("Cryptography_Xml_DigestValueRequired", @"A Reference must contain a DigestValue.");
        /// <summary>An XmlDocument context is required for enveloped transforms.</summary>
        internal static string Cryptography_Xml_EnvelopedSignatureRequiresContext => GetResourceString("Cryptography_Xml_EnvelopedSignatureRequiresContext", @"An XmlDocument context is required for enveloped transforms.");
        /// <summary>Malformed element {0}.</summary>
        internal static string Cryptography_Xml_InvalidElement => GetResourceString("Cryptography_Xml_InvalidElement", @"Malformed element {0}.");
        /// <summary>Malformed encryption property element.</summary>
        internal static string Cryptography_Xml_InvalidEncryptionProperty => GetResourceString("Cryptography_Xml_InvalidEncryptionProperty", @"Malformed encryption property element.");
        /// <summary>The key size should be a non negative integer.</summary>
        internal static string Cryptography_Xml_InvalidKeySize => GetResourceString("Cryptography_Xml_InvalidKeySize", @"The key size should be a non negative integer.");
        /// <summary>Malformed reference element.</summary>
        internal static string Cryptography_Xml_InvalidReference => GetResourceString("Cryptography_Xml_InvalidReference", @"Malformed reference element.");
        /// <summary>The length of the signature with a MAC should be less than the hash output length.</summary>
        internal static string Cryptography_Xml_InvalidSignatureLength => GetResourceString("Cryptography_Xml_InvalidSignatureLength", @"The length of the signature with a MAC should be less than the hash output length.");
        /// <summary>The length in bits of the signature with a MAC should be a multiple of 8.</summary>
        internal static string Cryptography_Xml_InvalidSignatureLength2 => GetResourceString("Cryptography_Xml_InvalidSignatureLength2", @"The length in bits of the signature with a MAC should be a multiple of 8.");
        /// <summary>X509 issuer serial number is invalid.</summary>
        internal static string Cryptography_Xml_InvalidX509IssuerSerialNumber => GetResourceString("Cryptography_Xml_InvalidX509IssuerSerialNumber", @"X509 issuer serial number is invalid.");
        /// <summary>A KeyInfo element is required to check the signature.</summary>
        internal static string Cryptography_Xml_KeyInfoRequired => GetResourceString("Cryptography_Xml_KeyInfoRequired", @"A KeyInfo element is required to check the signature.");
        /// <summary>The length of the encrypted data in Key Wrap is either 32, 40 or 48 bytes.</summary>
        internal static string Cryptography_Xml_KW_BadKeySize => GetResourceString("Cryptography_Xml_KW_BadKeySize", @"The length of the encrypted data in Key Wrap is either 32, 40 or 48 bytes.");
        /// <summary>Signing key is not loaded.</summary>
        internal static string Cryptography_Xml_LoadKeyFailed => GetResourceString("Cryptography_Xml_LoadKeyFailed", @"Signing key is not loaded.");
        /// <summary>Symmetric algorithm is not specified.</summary>
        internal static string Cryptography_Xml_MissingAlgorithm => GetResourceString("Cryptography_Xml_MissingAlgorithm", @"Symmetric algorithm is not specified.");
        /// <summary>Cipher data is not specified.</summary>
        internal static string Cryptography_Xml_MissingCipherData => GetResourceString("Cryptography_Xml_MissingCipherData", @"Cipher data is not specified.");
        /// <summary>Unable to retrieve the decryption key.</summary>
        internal static string Cryptography_Xml_MissingDecryptionKey => GetResourceString("Cryptography_Xml_MissingDecryptionKey", @"Unable to retrieve the decryption key.");
        /// <summary>Unable to retrieve the encryption key.</summary>
        internal static string Cryptography_Xml_MissingEncryptionKey => GetResourceString("Cryptography_Xml_MissingEncryptionKey", @"Unable to retrieve the encryption key.");
        /// <summary>The specified cryptographic transform is not supported.</summary>
        internal static string Cryptography_Xml_NotSupportedCryptographicTransform => GetResourceString("Cryptography_Xml_NotSupportedCryptographicTransform", @"The specified cryptographic transform is not supported.");
        /// <summary>At least one Reference element is required.</summary>
        internal static string Cryptography_Xml_ReferenceElementRequired => GetResourceString("Cryptography_Xml_ReferenceElementRequired", @"At least one Reference element is required.");
        /// <summary>The Reference type must be set in an EncryptedReference object.</summary>
        internal static string Cryptography_Xml_ReferenceTypeRequired => GetResourceString("Cryptography_Xml_ReferenceTypeRequired", @"The Reference type must be set in an EncryptedReference object.");
        /// <summary>An XmlDocument context is required to resolve the Reference Uri {0}.</summary>
        internal static string Cryptography_Xml_SelfReferenceRequiresContext => GetResourceString("Cryptography_Xml_SelfReferenceRequiresContext", @"An XmlDocument context is required to resolve the Reference Uri {0}.");
        /// <summary>SignatureDescription could not be created for the signature algorithm supplied.</summary>
        internal static string Cryptography_Xml_SignatureDescriptionNotCreated => GetResourceString("Cryptography_Xml_SignatureDescriptionNotCreated", @"SignatureDescription could not be created for the signature algorithm supplied.");
        /// <summary>The key does not fit the SignatureMethod.</summary>
        internal static string Cryptography_Xml_SignatureMethodKeyMismatch => GetResourceString("Cryptography_Xml_SignatureMethodKeyMismatch", @"The key does not fit the SignatureMethod.");
        /// <summary>A signature method is required.</summary>
        internal static string Cryptography_Xml_SignatureMethodRequired => GetResourceString("Cryptography_Xml_SignatureMethodRequired", @"A signature method is required.");
        /// <summary>Signature requires a SignatureValue.</summary>
        internal static string Cryptography_Xml_SignatureValueRequired => GetResourceString("Cryptography_Xml_SignatureValueRequired", @"Signature requires a SignatureValue.");
        /// <summary>Signature requires a SignedInfo.</summary>
        internal static string Cryptography_Xml_SignedInfoRequired => GetResourceString("Cryptography_Xml_SignedInfoRequired", @"Signature requires a SignedInfo.");
        /// <summary>The input type was invalid for this transform.</summary>
        internal static string Cryptography_Xml_TransformIncorrectInputType => GetResourceString("Cryptography_Xml_TransformIncorrectInputType", @"The input type was invalid for this transform.");
        /// <summary>Type of input object is invalid.</summary>
        internal static string Cryptography_Xml_IncorrectObjectType => GetResourceString("Cryptography_Xml_IncorrectObjectType", @"Type of input object is invalid.");
        /// <summary>Unknown transform has been encountered.</summary>
        internal static string Cryptography_Xml_UnknownTransform => GetResourceString("Cryptography_Xml_UnknownTransform", @"Unknown transform has been encountered.");
        /// <summary>Unable to resolve Uri {0}.</summary>
        internal static string Cryptography_Xml_UriNotResolved => GetResourceString("Cryptography_Xml_UriNotResolved", @"Unable to resolve Uri {0}.");
        /// <summary>The specified Uri is not supported.</summary>
        internal static string Cryptography_Xml_UriNotSupported => GetResourceString("Cryptography_Xml_UriNotSupported", @"The specified Uri is not supported.");
        /// <summary>A Uri attribute is required for a CipherReference element.</summary>
        internal static string Cryptography_Xml_UriRequired => GetResourceString("Cryptography_Xml_UriRequired", @"A Uri attribute is required for a CipherReference element.");
        /// <summary>Null Context property encountered.</summary>
        internal static string Cryptography_Xml_XrmlMissingContext => GetResourceString("Cryptography_Xml_XrmlMissingContext", @"Null Context property encountered.");
        /// <summary>IRelDecryptor is required.</summary>
        internal static string Cryptography_Xml_XrmlMissingIRelDecryptor => GetResourceString("Cryptography_Xml_XrmlMissingIRelDecryptor", @"IRelDecryptor is required.");
        /// <summary>Issuer node is required.</summary>
        internal static string Cryptography_Xml_XrmlMissingIssuer => GetResourceString("Cryptography_Xml_XrmlMissingIssuer", @"Issuer node is required.");
        /// <summary>License node is required.</summary>
        internal static string Cryptography_Xml_XrmlMissingLicence => GetResourceString("Cryptography_Xml_XrmlMissingLicence", @"License node is required.");
        /// <summary>Unable to decrypt grant content.</summary>
        internal static string Cryptography_Xml_XrmlUnableToDecryptGrant => GetResourceString("Cryptography_Xml_XrmlUnableToDecryptGrant", @"Unable to decrypt grant content.");
        /// <summary>The certificate key algorithm is not supported.</summary>
        internal static string NotSupported_KeyAlgorithm => GetResourceString("NotSupported_KeyAlgorithm", @"The certificate key algorithm is not supported.");
        /// <summary>Actual hash value: {0}</summary>
        internal static string Log_ActualHashValue => GetResourceString("Log_ActualHashValue", @"Actual hash value: {0}");
        /// <summary>Beginning canonicalization using "{0}" ({1}).</summary>
        internal static string Log_BeginCanonicalization => GetResourceString("Log_BeginCanonicalization", @"Beginning canonicalization using ""{0}"" ({1}).");
        /// <summary>Beginning signature computation.</summary>
        internal static string Log_BeginSignatureComputation => GetResourceString("Log_BeginSignatureComputation", @"Beginning signature computation.");
        /// <summary>Beginning signature verification.</summary>
        internal static string Log_BeginSignatureVerification => GetResourceString("Log_BeginSignatureVerification", @"Beginning signature verification.");
        /// <summary>Building and verifying the X509 chain for certificate {0}.</summary>
        internal static string Log_BuildX509Chain => GetResourceString("Log_BuildX509Chain", @"Building and verifying the X509 chain for certificate {0}.");
        /// <summary>Canonicalization transform is using resolver {0} and base URI "{1}".</summary>
        internal static string Log_CanonicalizationSettings => GetResourceString("Log_CanonicalizationSettings", @"Canonicalization transform is using resolver {0} and base URI ""{1}"".");
        /// <summary>Output of canonicalization transform: {0}</summary>
        internal static string Log_CanonicalizedOutput => GetResourceString("Log_CanonicalizedOutput", @"Output of canonicalization transform: {0}");
        /// <summary>Certificate chain:</summary>
        internal static string Log_CertificateChain => GetResourceString("Log_CertificateChain", @"Certificate chain:");
        /// <summary>Checking signature format using format validator "[{0}] {1}.{2}".</summary>
        internal static string Log_CheckSignatureFormat => GetResourceString("Log_CheckSignatureFormat", @"Checking signature format using format validator ""[{0}] {1}.{2}"".");
        /// <summary>Checking signature on SignedInfo with id "{0}".</summary>
        internal static string Log_CheckSignedInfo => GetResourceString("Log_CheckSignedInfo", @"Checking signature on SignedInfo with id ""{0}"".");
        /// <summary>Signature format validation was successful.</summary>
        internal static string Log_FormatValidationSuccessful => GetResourceString("Log_FormatValidationSuccessful", @"Signature format validation was successful.");
        /// <summary>Signature format validation failed.</summary>
        internal static string Log_FormatValidationNotSuccessful => GetResourceString("Log_FormatValidationNotSuccessful", @"Signature format validation failed.");
        /// <summary>Found key usages "{0}" in extension {1} on certificate {2}.</summary>
        internal static string Log_KeyUsages => GetResourceString("Log_KeyUsages", @"Found key usages ""{0}"" in extension {1} on certificate {2}.");
        /// <summary>No namespaces are being propagated.</summary>
        internal static string Log_NoNamespacesPropagated => GetResourceString("Log_NoNamespacesPropagated", @"No namespaces are being propagated.");
        /// <summary>Propagating namespace {0}="{1}".</summary>
        internal static string Log_PropagatingNamespace => GetResourceString("Log_PropagatingNamespace", @"Propagating namespace {0}=""{1}"".");
        /// <summary>Raw signature: {0}</summary>
        internal static string Log_RawSignatureValue => GetResourceString("Log_RawSignatureValue", @"Raw signature: {0}");
        /// <summary>Reference {0} hashed with "{1}" ({2}) has hash value {3}, expected hash value {4}.</summary>
        internal static string Log_ReferenceHash => GetResourceString("Log_ReferenceHash", @"Reference {0} hashed with ""{1}"" ({2}) has hash value {3}, expected hash value {4}.");
        /// <summary>Revocation mode for chain building: {0}.</summary>
        internal static string Log_RevocationMode => GetResourceString("Log_RevocationMode", @"Revocation mode for chain building: {0}.");
        /// <summary>Revocation flag for chain building: {0}.</summary>
        internal static string Log_RevocationFlag => GetResourceString("Log_RevocationFlag", @"Revocation flag for chain building: {0}.");
        /// <summary>Calculating signature with key {0} using signature description {1}, hash algorithm {2}, and asymmetric signature formatter {3}.</summary>
        internal static string Log_SigningAsymmetric => GetResourceString("Log_SigningAsymmetric", @"Calculating signature with key {0} using signature description {1}, hash algorithm {2}, and asymmetric signature formatter {3}.");
        /// <summary>Calculating signature using keyed hash algorithm {0}.</summary>
        internal static string Log_SigningHmac => GetResourceString("Log_SigningHmac", @"Calculating signature using keyed hash algorithm {0}.");
        /// <summary>Hashing reference {0}, Uri "{1}", Id "{2}", Type "{3}" with hash algorithm "{4}" ({5}).</summary>
        internal static string Log_SigningReference => GetResourceString("Log_SigningReference", @"Hashing reference {0}, Uri ""{1}"", Id ""{2}"", Type ""{3}"" with hash algorithm ""{4}"" ({5}).");
        /// <summary>Transformed reference contents: {0}</summary>
        internal static string Log_TransformedReferenceContents => GetResourceString("Log_TransformedReferenceContents", @"Transformed reference contents: {0}");
        /// <summary>Canonicalization method "{0}" is not on the safe list. Safe canonicalization methods are: {1}.</summary>
        internal static string Log_UnsafeCanonicalizationMethod => GetResourceString("Log_UnsafeCanonicalizationMethod", @"Canonicalization method ""{0}"" is not on the safe list. Safe canonicalization methods are: {1}.");
        /// <summary>URL retrieval timeout for chain building: {0}.</summary>
        internal static string Log_UrlTimeout => GetResourceString("Log_UrlTimeout", @"URL retrieval timeout for chain building: {0}.");
        /// <summary>Verification failed checking {0}.</summary>
        internal static string Log_VerificationFailed => GetResourceString("Log_VerificationFailed", @"Verification failed checking {0}.");
        /// <summary>references</summary>
        internal static string Log_VerificationFailed_References => GetResourceString("Log_VerificationFailed_References", @"references");
        /// <summary>SignedInfo</summary>
        internal static string Log_VerificationFailed_SignedInfo => GetResourceString("Log_VerificationFailed_SignedInfo", @"SignedInfo");
        /// <summary>X509 chain verification</summary>
        internal static string Log_VerificationFailed_X509Chain => GetResourceString("Log_VerificationFailed_X509Chain", @"X509 chain verification");
        /// <summary>X509 key usage verification</summary>
        internal static string Log_VerificationFailed_X509KeyUsage => GetResourceString("Log_VerificationFailed_X509KeyUsage", @"X509 key usage verification");
        /// <summary>Verification flags for chain building: {0}.</summary>
        internal static string Log_VerificationFlag => GetResourceString("Log_VerificationFlag", @"Verification flags for chain building: {0}.");
        /// <summary>Verification time for chain building: {0}.</summary>
        internal static string Log_VerificationTime => GetResourceString("Log_VerificationTime", @"Verification time for chain building: {0}.");
        /// <summary>Verification with key {0} was successful.</summary>
        internal static string Log_VerificationWithKeySuccessful => GetResourceString("Log_VerificationWithKeySuccessful", @"Verification with key {0} was successful.");
        /// <summary>Verification with key {0} was not successful.</summary>
        internal static string Log_VerificationWithKeyNotSuccessful => GetResourceString("Log_VerificationWithKeyNotSuccessful", @"Verification with key {0} was not successful.");
        /// <summary>Processing reference {0}, Uri "{1}", Id "{2}", Type "{3}".</summary>
        internal static string Log_VerifyReference => GetResourceString("Log_VerifyReference", @"Processing reference {0}, Uri ""{1}"", Id ""{2}"", Type ""{3}"".");
        /// <summary>Verifying SignedInfo using key {0}, signature description {1}, hash algorithm {2}, and asymmetric signature deformatter {3}.</summary>
        internal static string Log_VerifySignedInfoAsymmetric => GetResourceString("Log_VerifySignedInfoAsymmetric", @"Verifying SignedInfo using key {0}, signature description {1}, hash algorithm {2}, and asymmetric signature deformatter {3}.");
        /// <summary>Verifying SignedInfo using keyed hash algorithm {0}.</summary>
        internal static string Log_VerifySignedInfoHmac => GetResourceString("Log_VerifySignedInfoHmac", @"Verifying SignedInfo using keyed hash algorithm {0}.");
        /// <summary>Error building X509 chain: {0}: {1}.</summary>
        internal static string Log_X509ChainError => GetResourceString("Log_X509ChainError", @"Error building X509 chain: {0}: {1}.");
        /// <summary>Using context: {0}</summary>
        internal static string Log_XmlContext => GetResourceString("Log_XmlContext", @"Using context: {0}");
        /// <summary>Signed xml recursion limit hit while trying to decrypt the key. Reference {0} hashed with "{1}" and ({2}).</summary>
        internal static string Log_SignedXmlRecursionLimit => GetResourceString("Log_SignedXmlRecursionLimit", @"Signed xml recursion limit hit while trying to decrypt the key. Reference {0} hashed with ""{1}"" and ({2}).");
        /// <summary>Transform method "{0}" is not on the safe list. Safe transform methods are: {1}.</summary>
        internal static string Log_UnsafeTransformMethod => GetResourceString("Log_UnsafeTransformMethod", @"Transform method ""{0}"" is not on the safe list. Safe transform methods are: {1}.");

    }
}
